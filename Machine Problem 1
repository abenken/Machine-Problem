#include <iostream>
#include <string>
#define NUMSTUD 50
#define NUMQUIZ 4
#define NUMSW 10
using namespace std;

double scores[NUMSTUD][6]; //two-dimensional-array for scores (total quiz score, total exam score, notebook score, total sw score, bw score, raw score}
string students[NUMSTUD]; // array of the names of students
int main()
{
	int totalQ = 0, q, exam, sw, totalSW = 0, maxBW = 0;
	double transmute(double raw); //method to return the transmuted score of a certain raw score
	void swap(int row1, int row2); //method to swap 2 rows of the array scores
	int i, j;
	for(i = 0; i < NUMSTUD; i++) {
		
		cout << "Enter Student #" << (i + 1) << " Name: ";
		if(i != 0) {
			cin.ignore(); //ignore empty space as input in getLine() after the first iteration
		}
		getline(cin, students[i]); //accept name of student into the ith index of the array
		
		for(j = 0; j < NUMQUIZ; j++) { // iterate 4 times to accept 4 scores form quiz 1 to 4
			cout << "Enter Quiz #" << (j + 1) << ": ";
			cin >> q;
			totalQ += q; // add the jth quiz score to the total quiz score for the ith student
		}
		scores[i][0] = totalQ;
		
		cout << "Enter Preliminary Exam Score: "; 
		cin >> scores[i][1];
		cout << "Enter Major Exam Score: ";
		cin >> exam;
		scores[i][1] += exam;
		
		cout << "Enter Notebook Grade: ";
		cin >> scores[i][2];
		
		for(j = 1; j <= NUMSW; j++) { // iterate 10 to time to accept 10 seatwork scores from sw 1 to 10
			cout << "Enter Seatwork #" << j << " Score: ";
			cin >> sw;
			totalSW += sw; //add the jth seatwork score to the total seatwork score for the ith student
		}
		scores[i][3] = totalSW;
		
		cout << "Enter Boardwork Grade: ";
		cin >> scores[i][4];
		if(scores[i][4] > maxBW) { //compare the highest boardwork score to the boardwork score of the ith student
			maxBW = scores[i][4]; //if the current highest boardwork score is less than the boardwork score of the ith student then replace the highest boardwork score
		}
		cout << endl;
		
		
		totalQ = 0; // initialize the variables
		q = 0;
		exam =0;
		sw = 0;
		totalSW = 0;
	}
	for(i = 0; i < NUMSTUD; i++) { //iterate for every student
		//compute the raw score based on the percentages and assign to the last index of the ith student score
		scores[i][5] = (double)(scores[i][0] * 0.6/4) + (double)(scores[i][1] * 0.4/2) + (double)((double)(scores[i][2] * 0.01) + (double)(scores[i][3] * 0.02) + (double)(scores[i][4] * 2 / maxBW));
	}
	cout << "\tName\t\t\tRaw Grade\t\tTransmuted Grade" << endl; //print label header
	for(i = 0; i < NUMSTUD; i++) { //iterate from the 1st student to the last student
		for(j = NUMSTUD - 1; j >= i + 1; j--) { //iterate from the last student to the value of i
			if(scores[j][5] > scores[j - 1][5]) { //compare if the value of the raw score of the jth student is greater than the preceeding student
				swap(j, j - 1); //if the condition is true, swap the poitions of the jth student and the preceeding student to increase the rank of the higher scoring student
			}
		}
	}
	for(i = 0; i < NUMSTUD; i++) { //iterate from the 1st student to the last
		cout << (i + 1) << "\t" << students[i] << "\t\t" << scores[i][5] << "\t\t\t" << transmute(scores[i][5]) << endl; // print the name, raw score, and the transmuted score
		if(i == 9) {
			cout << endl; //if the 10th student is printed, print a space to separate the top 10 to the rest
		}
 	}
}
double transmute(double raw) {
	int a;
	//identify the transmuted value of the raw score by comparing the highest score per transmuted score to the raw
	if(raw <= 64.44) {
		return 3.0;
	}
	if(raw <= 68.89) {
		return 2.75;
	}
	if(raw <= 73.33) {
		return 2.50;
	}
	if(raw <= 77.78) {
		return 2.25;
	}
	if(raw <= 82.22) {
		return 2.0;
	}
	if(raw <= 86.67) {
		return 1.75;
	}
	if(raw <= 91.11) {
		return 1.50;
	}
	if(raw <= 95.56) {
		return 1.25;
	}
	if(raw > 95.56) {
		return 1.0;
	}
	return 1.0;
	//return transmuted value
}
void swap(int row1, int row2) { //accept the indices of the rows to be swapped
	int a;
	double temp;
	string n;
	for(a = 0; a < 6; a++) { //iterate 6 times to swap the scores
		temp = scores[row1][a]; //place the ath score of the row1th student in a temporary variable
		scores[row1][a] = scores[row2][a]; //place the ath score of the row2th student in the row1th student as its ath score
		scores[row2][a] = temp; //place the temporary variable's value into the row2th ath score
	}
	n = students[row1]; //place the name of the row1th student in a temporary variable
	students[row1] = students[row2]; //place the name of the row2th student in the row1th position
	students[row2] = n; //place the value of the temporary variable in the row2th position
}
